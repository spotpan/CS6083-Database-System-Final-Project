i.
INSERT INTO Usr VALUES('Jack2016', 'Jack2016', 'jzd1209');

ii.
SELECT pname FROM Project AS P, Request AS R WHERE LOWER(tag) LIKE 'jazz' AND status = 'processing' AND P.pid = R.pid
ORDER BY R.endtime DESC;


iii.
SELECT C.uname as uname, SUM(C.totalamount) as sum
FROM Charge as C, Project as P
WHERE P.pid = C.pid AND P.tag = 'Jazz'
GROUP BY C.uname
ORDER BY sum;

iv.
CREATE VIEW countcompleted AS 
SELECT uname, COUNT(pid) AS cnt
FROM Project
WHERE status = 'completed'
GROUP BY uname
HAVING COUNT(pid) >= 3;

CREATE VIEW completedpid AS SELECT P.pid, P.uname
FROM countcompleted AS CC, Project AS P
WHERE P.uname = CC.uname
AND P.status = 'completed';

CREATE VIEW completedratepid AS SELECT R.ratenumber, R.uname, R.pid
FROM completedpid AS CP, Rate AS R
WHERE CP.pid = R.pid;

CREATE VIEW completedratepidsponsor AS SELECT CC.*
FROM completedratepid AS CC, Charge as C
WHERE CC.uname = C.uname
AND CC.pid = C.pid;

CREATE VIEW avgratesponsor AS SELECT AVG(ratenumber), pid  
FROM completedratepidsponsor
GROUP BY pid
HAVING AVG(ratenumber) >= 4;

SELECT name FROM (
SELECT COUNT(*), CP.uname AS name
FROM completedpid AS CP, avgratesponsor as ARS
WHERE CP.pid = ARS.pid GROUP BY CP.uname
HAVING COUNT(*) IN (SELECT cnt     
FROM countcompleted AS CC
WHERE CC.uname = CP.uname)) AS U;

v.
WITH followedby_Bob(following) AS (SELECT following from follow where uname = 'BobInBrooklyn') SELECT C.* from followedby_Bob AS FB, Comment AS C Where C.uname = FB.following;

vi.
INSERT INTO Project VALUES(100011, 'Jack2016', 'Smooth, Smooth Jazz', 'We are a group of theater students at W University in the midst of putting on the first ever production of the play, "Smooth, Smooth Jazz". It is a dark comedy in 2 acts, written by Teague Parker and Directed by Alyssa Balogh. The cast, crew, director, and playwright are all current students. This play was awarded the Kennedy Center American College Theatre Festival Region 7 award for best play.', 'processing', 'Jazz', '2016-05-21', '2017-05-21 20:00:00');

vii.
INSERT INTO Pledge VALUES(100011, 'AlexLexington', 30, '2017-04-10 18:15:00');

viii.
CREATE OR REPLACE FUNCTION project_status_changes()
RETURNS trigger AS  
$$  
BEGIN  
IF ((SELECT SUM(p.amount)
FROM Pledge AS P, Project AS PR
WHERE P.pid = NEW.pid
AND PR.status = 'processing') >=( 
SELECT R.max 
FROM Request AS R
WHERE R.pid = NEW.pid))
THEN UPDATE Project
SET status = 'completed'
WHERE pid = NEW.pid;
RETURN NEW;
END IF;
END;  
$$  
LANGUAGE 'plpgsql';  

CREATE trigger FoundDetect
AFTER INSERT
ON Pledge
FOR EACH ROW 
EXECUTE PROCEDURE project_status_changes();

CREATE OR REPLACE FUNCTION charge_changes()
RETURNS trigger AS  
$$  
BEGIN  
IF (OLD.status != new.status
AND NEW.status = 'completed')
THEN INSERT INTO Charge(pid, uname, totalamount, d)
(SELECT pid, uname, SUM(amount) AS totalamount, localtimestamp AS d
FROM Pledge AS P
WHERE P.pid = NEW.pid
GROUP BY P.uname, P.pid);
RETURN NEW;
END IF;
END;  
$$  
LANGUAGE 'plpgsql'; 

CREATE trigger CompleteCharge
BEFORE UPDATE
ON Project
FOR EACH ROW 
EXECUTE PROCEDURE charge_changes();

Past endtime and return back to status = ‘not-started’ trigger:
create event timer
on schedule every 10 second
on completion preserve enable
do
begin
update project as p, request as r
set p.status = 'not-started'
where p.pid = r.pid and r.endtime - now() < 0
end;

